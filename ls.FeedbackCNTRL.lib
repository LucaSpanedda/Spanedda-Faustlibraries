// FAUST standard library
import("stdfaust.lib");

/*
TO DO: fix local max Hold The Max Value with selector
output dB values
*/

// TPT version of the SVF Filter by Vadim Zavalishin
// reference : (by Will Pirkle)
// http://www.willpirkle.com/Downloads/AN-4VirtualAnalogFilters.2.0.pdf
// SVFTPT filter function
SVFTPT(K, Q, CF, x) = circuitout
    with {
        g = tan(CF * ma.PI / ma.SR);
        R = 1.0 / (2.0 * Q);
        G1 = 1.0 / (1.0 + 2.0 * R * g + g * g);
        G2 = 2.0 * R + g;

        circuit(s1, s2) = u1 , u2 , lp , hp , bp, notch, apf, ubp, peak, bshelf
            with {
                hp = (x - s1 * G2 - s2) * G1;
                v1 = hp * g;
                bp = s1 + v1;
                v2 = bp * g;
                lp = s2 + v2;
                u1 = v1 + bp;
                u2 = v2 + lp;
                notch = x - ((2*R)*bp);
                apf = x - ((4*R)*bp);
                ubp = ((2*R)*bp);
                peak = lp -hp;
                bshelf = x + (((2*K)*R)*bp);
            };
    // choose the output from the SVF Filter (ex. bshelf)
    circuitrouting(u1 , u2 , lp , hp , bp, notch, apf, ubp, peak, bshelf) = notch;
    circuitout = circuit ~ si.bus(2) : circuitrouting;
    };


// smooth function (Onepole Filter)
Smooth(G) = *(1-G) : +~*(G);

// Conversions Formula: dB to a linear gain (0-1) and linear to dB
lineartodB(G) = 20.0*log10(max(ma.MIN, G));
dBtolinear(G) = pow(10.0, G/20.0);


// averaging function with 2pi time constant; t is the averaging time in seconds
avg(t, x) = y
    letrec {
        'y = x + alpha * (y - x);
    }
        with {
            alpha = exp((-2.0 * ma.PI * ma.T) / t);
        };

// zero-crossing indicator function
zeroCrossing(x) = (x * x') < 0;

// zero-crossing rate
zeroCrossingRate(t, x) = zeroCrossing(x) : avg(t);

// pitch tracker as zero-crossing rate of self-regulating lowpassed inputs
// we highpass the input to avoid infrasonic components to affect the measurements
// we then clip the lowpass cutoff to improve stability
pitchTracker(t, x) = loop ~ _
    with {
        loop(y) = fi.lowpass(4, max(80, y), xHighpassed) : (zeroCrossingRate(t) * ma.SR * .5) 
            with {
                xHighpassed = fi.highpass(1, 20, x);
            };
    };


// Local Max with IIR
LocalmaxContinuous = _ : abs <: loop ~_
with{
    loop(x) = ((_ , x) : max);
    };


// Local Max Hold The Max Value for a Frame in Seconds
LocalmaxSec(S) = _ : abs <: loop ~_
with{
    loop(x) = ((_ , (x*(1-Trainpulse))) : max);
    Trainpulse = (+(1) : %(ma.SR*S))~ _ <: (_ < (_:mem));
    };


// RMS with indipendent attack and release time
RMS(att,rel,x) = loop ~ _ : sqrt
    with {
        loop(y) = (1.0 - coeff) * x * x + coeff * y
            with {
                attCoeff = exp(-2.0 * ma.PI * ma.T / att);
                relCoeff = exp(-2.0 * ma.PI * ma.T / rel);
                coeff = ba.if(abs(x) > y, attCoeff, relCoeff);
            };
    };


// Larsen Suppression via Faust Biquad Filter - Filter parameter and input (x)
LarsensuppressorBF(t,x) = fi.notchw(100,(x:pitchTracker(t)),x);

// Larsen Suppression via SVFTPT Filter - Filter parameters and input (x)
LarsensuppressorSVFTPT(t,dBQ,x) = SVFTPT(0, dBQ:ba.db2linear, pitchTracker(t, x), x);

// Local max Suppression via Local max with IIR
Localmaxsuppressor(x) = x <: *(1-LocalmaxContinuous);

// RMS Suppression via RMS with indipendent attack and release time
RMSsuppressor(att,rel,x) = x*(1-(x:RMS(att,rel)));


process = _ : LarsensuppressorSVFTPT(.04) <: _,_;