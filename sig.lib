// THIS library
sig = library("sig.lib");
// Luca Spanedda's Standard Faust Libraries
import("stdls.lib");

/*
Signal generation library
*/

//------------------------------------------------ SIGNALS IN VIRTUAL ANALOG ---

// noise
noiseIndex(index) = (+ (index)~ * (1103515245)) / 2147483647;
//process = noise(3);

// fixed noise
noise = 1345789214 : noiseIndex;

// noise with prime numbers
primeNoise(index) = primeNumbers(index+1) : noiseIndex;

// ramp generator: frequency, ramp in ms.
ramp(ms,trig) = (1000/ms)/ma.SR : + ~ _ * (1-trig) : \(x).( (x < 1) * x );

// pulse train (1 sample)
pulse(f) = f/ma.SR : + ~ \(x).( (x < 1) * x ) : \(y).( y < y' ) + (1-1');

// classic phasor
phasor(f) = (f/ma.SR):(+ :\(x).(selector(0,x,0)) : decimal)~_ ;
// phasor with phase reset
phasorPH(f,trig) = (f/ma.SR):(+ :\(x).(selector(trig,x,0)) :\(x).(x-int(x)))~_ ;
// phasor with scattering of the phase when triggered (out 1),
// and splice of the phase = the trigger dimension (out 2)
splicePH(frequency, noiseindex, trigger) =
                                             ( PhasorPH(frequency,0) ),
        ( ((trigger*-1) + 1, primeNoise(noiseindex)) : SAH : abs ):
        \(x,y).(
                    // out phasor + noise->SAH when triggered
                    (x+y : \(z).(z-int(z))),
                    // out phasor + noise->SAH * trigger
                    (x+y : \(z).(z-int(z)) * trigger)
                );

// sawtooth
saw(f) = (( (phasor(f) * -1) + 1) - .5) * 2;
//process = saw(100);

// sawtooth II
sawII(f) = ((phasor(f) - .5) * 2);
//process = sawII(100);

// sinusoidal oscillator
sinusoid(f) = phasor(f) : math.sine;
//process = sinusoid(100);

// sinusoidal oscillator M
sinusoidM(f) = phasor(f) * .5 : (math.sine - .5) * 2;
//process = sinusoidM(100);

// sinusoidal oscillator W
sinusoidW(f) = phasor(f) * .5 : (math.cosine + .5) * 2;
//process = sinusoidW(100);

// square
square(f) = ((phasor(f) > .5) - .5) * 2;
//process = square(100);

// PWM square - PWM control from -1 to +1
pwmsquare(f,pwm) = ((((phasor(f) - .5) * 2) + pwm > 0) - .5) * 2;
//process = pwmsquare(100, 0);

// triangular
triangular(f) = phasor(f) : (math.triangle - .5) * 2;
//process = triangular(100);

// button counter
buttoncounter(N) = button("PRGRMChange") : \(x).((x - x') > 0 : (+ ~ _ )%(N));

// osc bank
oscbank(index, f, cntrl) =
                            va.saw(f) * (index == 0) +
                            va.sawII(f) * (index == 1) +
                            va.triangular(f) * (index == 2) +
                            va.sinusoid(f) * (index == 3) +
                            va.sinusoidW(f) * (index == 4) +
                            va.sinusoidM(f) * (index == 5) +
                            va.pwmsquare(f, cntrl) * (index == 6) +
                            va.noise(12345678) * (index == 7);
