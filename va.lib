// THIS library
va = library("va.lib");
// my standard library
import("stdls.lib");

/*
Virtual Analog Library
*/

//----------------------------------------------- VIRTUAL ANALOG OSCILLATORS ---
// classic phasor
phasor(f) =  f/ma.SR : (+ : math.decimal) ~ _ ;

// sawtooth
saw(f) = (( (phasor(f) * -1) + 1) - .5) * 2;
//process = saw(100);

// sawtooth II
sawII(f) = ((phasor(f) - .5) * 2);
//process = sawII(100);

// sinusoidal oscillator
sinusoid(f) = phasor(f) : math.sine;
//process = sinusoid(100);

// sinusoidal oscillator M
sinusoidM(f) = phasor(f) * .5 : (math.sine - .5) * 2;
//process = sinusoidM(100);

// sinusoidal oscillator W
sinusoidW(f) = phasor(f) * .5 : (math.cosine + .5) * 2;
//process = sinusoidW(100);

// square
square(f) = ((phasor(f) > .5) - .5) * 2;
//process = square(100);

// PWM square - PWM control from -1 to +1
pwmsquare(f,pwm) = ((((phasor(f) - .5) * 2) + pwm > 0) - .5) * 2;
//process = pwmsquare(100, 0);

// triangular
triangular(f) = phasor(f) : (math.triangle - .5) * 2;
//process = triangular(100);

// noise
noise(index) = (+ (index)~ * (1103515245)) / 2147483647;
//process = noise(3);

// prime noise
primeNoise(index) = (+ (math.primeNumbers(index))~ * (1103515245)) / 2147483647;
//process = primeNoise(3);

// button counter
buttoncounter(N) = button("PRGRMChange") : \(x).((x - x') > 0 : (+ ~ _ )%(N));

// osc bank
oscbank(index, f, cntrl) = 
                            va.saw(f) * (index == 0) +
                            va.sawII(f) * (index == 1) +
                            va.triangular(f) * (index == 2) +
                            va.sinusoid(f) * (index == 3) +
                            va.sinusoidW(f) * (index == 4) +
                            va.sinusoidM(f) * (index == 5) +
                            va.pwmsquare(f, cntrl) * (index == 6) +
                            va.noise(12345678) * (index == 7);