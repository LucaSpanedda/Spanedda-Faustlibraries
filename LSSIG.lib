// FAUST standard library
import("stdfaust.lib");
// THIS library
SIG = library("LSSIG.lib");

/*
Generic Signal Processing Library for DSP:
- Generation of signals (oscillators,lfo...)
- Processing of signals (waveshaping,distortion...)
*/

// Dirac Impulse value based on ADC status at Compile Time
ADCDirac = (1-(1:mem))*_ : (_*1000000000) : abs : Wrap;

// Constant value based on ADC status at Compile Time
ADCConstant = ADCDirac : +~_;

// Binary Selector - 0 = out1, 1 = out2
Selector(sel,x,y) = (x*(1-sel)+y*(sel)); 

// Wrap = Rescale the Int Part of the Signal
Wrap(x)=x-int(x);

// 1 when the Derivate part of the signal becomes negative
Derivative(x)=x<(x:mem);

// Sample and Hold Circuit:  Sig --> circuit(control signal for trigger)
SAH(trig,x) = loop
    with{
        loop = ((_,x) : Selector(trig))~_
        with{
            Selector(sel) = (_*(1-sel)+_*(sel)); 
        };
    };
    
// Sample and Hold Function with Faust select2
SAH2(trig,x) = loop~_
    with{
        loop(y) = (y,x : select2(trig));
    };

// Sample and Hold Function with internal Frequency Control
SAHf(F,x) = loop
    with{
        loop = ((_,x) : Selector(Trainpulse(F)))~_
        with{
            Selector(sel) = (_*(1-sel)+_*(sel)); 
            Trainpulse(f) = Xn <: _<(_:mem)
                letrec{
                    'Xn = (Xn+(f/ma.SR))-int(Xn);
                    };
        };
    };

// Wavefolding (g = gain, Sig)= waveshaper : saturator via Triangular Tabulation.
Wavefolding(g,x) = (x*(g/2)) <: ((_>0)*(_) <: (_<+0.5)*(_) + ((_>+0.5)*((_*-1)+1))),
                   ((_<0)*(_) <: (_>-0.5)*(_) + ((_<-0.5)*((_*-1)-1))) :> + : _*2;

// RANDOM GENERATOR : Change the seed value for generate a different random number
Randomseed(seed)  = ((seed*(1103515245)))/2147483647.0; 

// NOISE GENERATOR : for Every Seed a new Noise Stream
Noiseed(seed) = (+(seed)~*(1103515245))/(2147483647.0);

// NOISE GENERATOR F : with variable frequency and seed
NoiseFreq(f,seed) = Noiseed(seed) : SAH(Phasor(f));

// NOISE GENERATOR with variable frequency and seed in BIT values
NoiseFreqBit(f,seed) = (Noiseed(seed) : SAH(Phasor(f))>0)*2-1;

// NOISE BIT : noise 0 or 1
NoiseBit(seed) = (+(seed)~*(1103515245))/(2147483647.0)>0;

// NOISE Impulse Train - F
Noisepulse(F,seed) = Trainpulse(F)*Noiseed(seed);

// NOISE Impulse Train in BIT values - F
NoisepulseBit(F,seed) = Trainpulse(F)*Noiseed(seed)>0;

// BROWNIAN F : noise produced by Brownian motion, alternative name of random walk
BrownianF(f,noisef,seed) = ((f/ma.SR)*NoiseFreqBit(noisef,seed):(+ :Wrap)~_):Wavefolding(2);

// Phasor (f=frequency).
Phasor(f) = (f/ma.SR):(+ : Wrap)~_ ;

// Phasor via Differential Equation in letrec (f=frequency).
PhasorEQ(f) = Xn
    letrec{
        'Xn = (Xn+(f/ma.SR))-int(Xn);
        };

// Phasor with Phase Jitter
PhasorJitter(F,Fjitter,seed) = (Phasor(F)+(NoiseFreq(Fjitter,seed):abs)):Wrap;

// Phasor with two outs: 0° and 180°. (f=frequency)
Phasor180wrap(f) = (f/ma.SR)<:(ro.interleave(2,2):(+,+)<: xywrap)~ si.bus(2)
    with{xywrap(x,y)= (x-int(x)),((y+0.5)-int(y));};

// Virtual Analog Sine Oscillator
VASine(F) = sin(Phasor(F)*2*ma.PI);

// Virtual Analog Sine Oscillator with Phase Jitter
VASineJitter(F,Fjitter,seed) = sin(PhasorJitter(F,Fjitter,seed)*2*ma.PI);

// Wrap function (offset: treshold 0.0 to 1.0 and then rescale INT Part)
OffsetWrap(offset,x) = (x+offset)-int(x);

// Dirac Impulse Train 0-1 (F = frequency)
Trainpulse(F) = (+(1) : %(ma.SR/F))~ _ <: Derivative;

// Trainpulse with Variable Width
TrainpulseSAMP(Sec,Samps) = (+(1) : %(ma.SR*Sec))~ _ <: (_ < (_@Samps));

// Transform an input Signal to a Trainpulse 1 Sample
SigtoPulse1(x) = (((x:abs)<0.5)<:_<(_:mem));

// Transform an input Signal to a Trainpulse with Variable Width
SigtoPulseSAMP(Samps,x) = (((x:abs)<0.5)<:_<(_@Samps));

// Transform an input Signal to a Digital KICK Percussion
SigtoKICK(Amp,Decay,x) = sin(circuit)
    with{
        circuit = (x:SigtoPulse1)*Amp:(+ : _*Decay)~ _;
        };
