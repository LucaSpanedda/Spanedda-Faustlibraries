// FAUST standard library
import("stdfaust.lib");
// THIS library
SIG = library("LSSIG.lib");

/*
Generic Signal Processing Library for DSP:
- Generation of signals (oscillators,lfo...)
- Processing of signals (waveshaping,distortion...)
*/

// TO DO HERE : 2 SAH, 1 with internal trigger, 1 with external trigger ( Sig--->Abs ...)

// Sample and Hold Circuit:  Sig --> circuit(control signal for trigger)
SAH(x,y) = Circuit(y)~ _
with{
    Trig = (((x*-1+1)-0.5)>0)-((((x*-1+1)-0.5)>0):mem)>0;
    Circuit(y) = (*(1-Trig) + (y*Trig));
    };

// Wavefolding (g = gain, Sig)= waveshaper : saturator via Triangular Tabulation.
Wavefolding(g,x) = (x*(g/2)) <: ((_>0)*(_) <: (_<+0.5)*(_) + ((_>+0.5)*((_*-1)+1))),
                   ((_<0)*(_) <: (_>-0.5)*(_) + ((_<-0.5)*((_*-1)-1))) :> + : _*2;

// RANDOM GENERATOR : Change the seed value for generate a different random number
Randomseed(seed)  = ((seed*(1103515245)))/2147483647.0; 

// NOISE GENERATOR : for Every Seed a new Noise Stream
Noiseed(seed) = (+(seed)~*(1103515245))/(2147483647.0);

// NOISE GENERATOR F : with variable frequency and seed
NoiseFreq(f,seed) = Noiseed(seed) : SAH(Phasor(f));

// NOISE BIT : noise 0 or 1
NoiseBit(seed) = (+(seed)~*(1103515245))/(2147483647.0)>0;

Noisepulse(F,seed) = Trainpulse(F)*Noiseed(seed);

// TO DO HERE : TraiNNoise (Trainpulse * Noise)
// TO DO HERE : Brownian Noise(f, probability f) - (Gaussian Noise : Random Walk)
// TO DO HERE : TraiNNoiseBinary
// TO DO HERE : JitterPhasor (Slice Phasor)
// TO DO HERE : Various PHASORS
// TO DO HERE : JitterSineosc - sin(Slice Phasor)

// Phasor (f=frequency).
Phasor(f) = (f/ma.SR):(+ <: _-int(_))~_ ;

// Phasor with two outs: 0° and 180°. (f=frequency)
Phasor180wrap(f) = (f/ma.SR)<:(ro.interleave(2,2):(+,+)<: xywrap)~ si.bus(2)
    with{xywrap(x,y)= (x-int(x)),((y+0.5)-int(y));};

// Wrap = Rescale the Int Part of the Signal
Wrap(x)=x-int(x);
Derivative(x)=x<(x:mem);

// Wrap function (offset: treshold 0.0 to 1.0 and then rescale INT Part)
OffsetWrap(offset,x) = (x+offset)-int(x);

// Dirac Impulse Train 0-1 (F = frequency)
Trainpulse(F) = (+(1) : %(ma.SR/F))~ _ <: Derivative;

// Trainpulse with Variable Width
TrainpulseSAMP(Sec,Samps) = (+(1) : %(ma.SR*Sec))~ _ <: (_ < (_@Samps));

// Transform an input Signal to a Trainpulse 1 Sample
SigtoPulse1(x) = (((x:abs)<0.5)<:_<(_:mem));

// Transform an input Signal to a Trainpulse with Variable Width
SigtoPulseSAMP(Samps,x) = (((x:abs)<0.5)<:_<(_@Samps));

// Transform an input Signal to a Digital KICK Percussion
SigtoKICK(Amp,Decay,x) = sin(circuit)
    with{
        circuit = (x:SigtoPulse1)*Amp:(+ : _*Decay)~ _;
        };
