// FAUST standard library
import("stdfaust.lib");
// THIS library
ANRT = library("LSAnalizRT.lib");

/*
Analize in RealTime Audio Content library:
*/

// possible descriptors:
// Waveform
// STFT (Spectrogram)
// Spectral centroid
// Spectral flux
// LocalMax in dB
// RMS in digital dB


// smooth function (Onepole Filter)
Smooth(G) = *(1-G) : +~*(G);

// Conversions Formula: dB to a linear gain (0-1) and linear to dB
lineartodB(G) = 20.0*log10(max(ma.MIN, G));
dBtolinear(G) = pow(10.0, G/20.0);

// Hold The Max Value
LocalmaxContinuous = _ : abs <: loop ~_
with{
    loop(x) = ((_ , x) : max);
    };

// Hold The Max Value for a Frame in Seconds
LocalmaxSec(S) = _ : abs <: loop ~_
with{
    loop(x) = ((_ , (x*(1-Trainpulse))) : max);
    Trainpulse = (+(1) : %(ma.SR*S))~ _ <: (_ < (_:mem));
    };

// RMS with indipendent attack and release time
RMS(att, rel, x) = loop ~ _ : sqrt
    with {
        loop(y) = (1.0 - coeff) * x * x + coeff * y
            with {
                attCoeff = exp(-2.0 * ma.PI * ma.T / att);
                relCoeff = exp(-2.0 * ma.PI * ma.T / rel);
                coeff = ba.if(abs(x) > y, attCoeff, relCoeff);
            };
    };
    
/*
LAR S = Sec.
Feedback counterbalancing via simple "LAR" mechanism
LAR mechanism: Audio Feedback with Self-regulated Gain - REFERENCE (Agostino Di Scipio)
https://echo.orpheusinstituut.be/article/a-relational-ontology-of-feedback#audio
*/
LAR(S) = _ <: *(1-an.rms_envelope_rect(S));
