// FAUST standard library
import("stdfaust.lib");
// THIS library
ANRT = library("LSAnalizRT.lib");

/*
Analize in RealTime Audio Content library:
*/

// TO DO:
//
// PEAKHOLDER
// https://www.cs.princeton.edu/courses/archive/spr05/cos579/DSP/DSP.html
//

// smooth function (Onepole Filter)
Smooth(G) = *(1-G) : +~*(G);

// Conversions Formula: dB to a linear gain (0-1) and linear to dB
lineartodB(G) = 20.0*log10(max(ma.MIN, G));
dBtolinear(G) = pow(10.0, G/20.0);

// Hold The Max Value
LocalmaxContinuous = _ : abs <: loop ~_
with{
    loop(x) = ((_ , x) : max);
    };

// Hold The Max Value for a Frame in Seconds
LocalmaxSec(S) = _ : abs <: loop ~_
with{
    loop(x) = ((_ , (x*(1-Trainpulse))) : max);
    Trainpulse = (+(1) : %(ma.SR*S))~ _ <: (_ < (_:mem));
    };
    
// Dario Sanfilippo SlidingMax
/*
maxN(2) = max;
maxN(N) = max(maxN(N - 1));
slidingMax(N, x) = par(i, N, x @ i) : maxN(N);
process = _ <: slidingMax(12);
*/

/*
LAR S = Sec.
Feedback counterbalancing via simple "LAR" mechanism
LAR mechanism: Audio Feedback with Self-regulated Gain - REFERENCE (Agostino Di Scipio)
https://echo.orpheusinstituut.be/article/a-relational-ontology-of-feedback#audio
*/
LAR(S) = _ <: *(1-an.rms_envelope_rect(S));
