/*******************************************************************************
* SAH : SAMPLE AND HOLD
*******************************************************************************/
import("ls.lib");

// binary selector
selector(sel, x, y) = x * (1 - sel) + y * (sel);

// a classic sample and hold
sah(x, t) = selector(t, _, x) ~ _;

// sample and hold with internal trigger
sahSinc(f, x) = selector(phasor(f) : derivate, _, x) ~ _;

// asinchronous sah with clock in feedback (via FM)
sahAsinc(f1, f2, y) = out ~ _
with{
    ph(f, modf) = (f + modf : + ~ _ % ma.SR) / ma.SR;
    trigger(x) = x < x';
    iniTrig = 1 - 1';
    fMin = min(f1, f2);
    fMax = max(f1, f2);
    out(x) = (fMin, abs(x * (fMax - fMin))) : ph : trigger : (_ + iniTrig, x, y) : 
                selector;
};
//process = sahAsinc(1000, 10, no.noise);

// asinchronous sah with clock in feedback (via FM)
sahAsincPW(f1, f2, fw, y) = out ~ _ <: _, (_ <: _, window)
with{
    ph(f, modf) = (f + modf : + ~ _ % ma.SR) / ma.SR;
    trigger(x) = x < x';
    iniTrig = 1 - 1';
    fMin = min(f1, f2);
    fMax = max(f1, f2);
    out(x) = (fMin, abs(x * (fMax - fMin))) : ph : trigger <: ((_ + iniTrig, x, y) : 
                selector), _;
    window(t) = (t == 0) * fw : (+ ~ _* (1 - t)) / SR <: (_ < 1) * _;
};
//process = sahAsincPW(100, 1000, 1000, no.noise);

// pseudo-random noise with linear congruential generator (LCG)
noise(initSeed) = lcg ~ _ : (_ / m)
with{
    a = 18446744073709551557; c = 12345; m = 2 ^ 31; 
    lcg(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
};

// sah noise
sahNoise(f, seed) = sah(noise(seed), derivate(phasor(f)));

// asinc sah noise
sahNoiseAsinc(minf, maxf, seed) = sahAsinc(minf, maxf, noise(seed));