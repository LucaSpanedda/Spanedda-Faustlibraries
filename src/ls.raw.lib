/*******************************************************************************
* RAW : READ AND WRITE TABLES
*******************************************************************************/
import("ls.lib");

looper(i) = vgroup("looper", buffer)
with{
    LengthSecMax = 10;
    offset = 2;
    info(i, lo, up) = _ <: _, hbargraph(" %i ", lo, up) : attach;
    cgui(x) = vgroup("controls", x);
    kgui(x) = hgroup("knobs", x);
    readSpeed = cgui(kgui(4 ^ 
                hslider("[0]Read Speed [style:knob][unit:_pitch]",0,-1,+1,0.01)));
    lengthSec = cgui(kgui(
                hslider("[0]Tape Length [style:knob][unit:_sec]",1, 1, LengthSecMax, 1)));
    recIndex =  1 / float(SR * lengthSec) : (+ : ma.frac : 
                hgroup("writing %i", info(1, 0, 1))) ~ 
                * (record) : * (float(SR * lengthSec)) + (offset * record) : int;
    readIndex = readSpeed/float(SR * lengthSec) : (+ : ma.frac : 
                hgroup("reading %i", info(1, 0, 1))) ~ _ : 
                * (float(SR * lengthSec)) : int;
    record =    cgui(checkbox("[1]Record %i") : int);
    buffer =    rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex, _, readIndex + offset);
};

walkergrains(i, record, tapeLSec, fread, fjitter, fjitasinc, fwindow, x) = 
(x : vgroup("looper", buffer)) * (readPhasor : (!, _)) + * (1 - (readPhasor : (!, _)))
with{
    offset = 2;
    LengthSecMax = 10;
    // phasor with random reverse
    phasorScatteringX(f, fJitSinc, fAsinc, fWin, seed) = ph, window
        with{
            random = sahAsincPW(fJitSinc, fAsinc, fWin, noise(seed));
            ph = phasorOffset(f, abs(random : (_, !, !)));
            window = (random : (!, !, _)) > 0;
        };
    phasorReverse(f, minSF, maxSF, seed) = int ~  (_ + 1' * (sahAsinc(minSF, maxSF, noise(seed)) : signum)) % (SR / f) : _ * f : _ / SR : abs;
    readPhasor = phasorScatteringX(1 / lengthSec, mnsf, mxsf, fwindow, i * 1324);

    info(i, lo, up) = _ <: _, hbargraph(" %i ", lo, up) : attach;
    readSpeed = fread;
    lengthSec = clip(0.001, 10, tapeLSec) : int;
    recIndex =  1 / float(SR * lengthSec) : (+ : ma.frac : 
                hgroup("writing %i", info(1, 0, 1))) ~ 
                * (record) : * (float(SR * lengthSec)) + (offset * record) : int;
    mxsf = clip(.001, 1000, fjitter);
    mnsf = clip(.001, 1000, mxsf + fjitasinc);
    readIndex = (readPhasor : (_, !)) :
                hgroup("reading %i", info(1, 0, 1))
                * (float(SR * lengthSec)) : int;    randomsah(minF, maxF, y) = out ~ _ with{
        out(x) =    (minF, abs(x * (maxF - minF))) :> 
                phasor : dirac : (_ + dirac, x, y) : selector;
    };
    buffer = rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex, _, readIndex + offset);
};
//process = walkergrains(1, 1, 2, 10, 4, 8, 100, _); // ~ fi.dcblocker * 1; 
//process = _ <: ((ro.interleave(N, N / 2), si.bus(N)) :> si.bus(N) : par(i, N, walkergrains(1 + i, 1, 2) : fi.dcblocker)) ~ (si.bus(N) :> (_ / N) * 1.25 <: si.bus(N)) with{N = 4;};

looperJitterSinc(i, y) = vgroup("looper", buffer ~ _ * fb)
with{
    LengthSecMax = 10;
    offset = 2;
    info(i, lo, up) = _ <: _, hbargraph(" %i ", lo, up) : attach;
    cgui(x) = vgroup("controls", x);
    kgui(x) = hgroup("knobs", x);
    readSpeed = cgui(kgui(4 ^ 
                hslider("[0]Read Speed [style:knob][unit:_pitch]",0,-1,+1,0.01)));
    lengthSec = cgui(kgui(
                hslider("[0]Tape Length [style:knob][unit:_sec]",1, 1, LengthSecMax, 1)));
    fJitter = cgui(kgui(
                hslider("[0]F Jitter [style:knob][unit:_sec]",1, 1, 100, .001)));
    fb = cgui(kgui(
                hslider("[0]Feedback [style:knob][unit:_sec]",0, 0, 1, .001)));
    recIndex =  1 / float(SR * lengthSec) : (+ : ma.frac : 
                hgroup("writing %i", info(1, 0, 1))) ~ 
                * (record) : * (float(SR * lengthSec)) + (offset * record) : int;
    readIndex = phasorScatteringSinc(1 / lengthSec, fJitter, i * 42543218) : hgroup("reading %i", info(1, 0, 1)) * (float(SR * lengthSec)) : int;
    record =    cgui(checkbox("[1]Record ") : int);
    buffer(x) =    rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex, y + x, readIndex + offset);
};

looperJitterAsinc(i) = vgroup("looper", buffer)
with{
    LengthSecMax = 10;
    offset = 2;
    info(i, lo, up) = _ <: _, hbargraph(" %i ", lo, up) : attach;
    cgui(x) = vgroup("controls", x);
    kgui(x) = hgroup("knobs", x);
    readSpeed = cgui(kgui(4 ^ 
                hslider("[0]Read Speed [style:knob][unit:_pitch]",0,-1,+1,0.01)));
    lengthSec = cgui(kgui(
                hslider("[0]Tape Length [style:knob][unit:_sec]",1, 1, LengthSecMax, 1)));
    minfJitter = cgui(kgui(
                hslider("[0]min F Jitter [style:knob][unit:_sec]",1, 1, 100, .001)));
    maxfJitter = cgui(kgui(
                hslider("[0]max F Jitter [style:knob][unit:_sec]",1, 1, 100, .001)));
    recIndex =  1 / float(SR * lengthSec) : (+ : ma.frac : 
                hgroup("writing %i", info(1, 0, 1))) ~ 
                * (record) : * (float(SR * lengthSec)) + (offset * record) : int;
    readIndex = phasorScatteringAsinc(1 / lengthSec, minfJitter, maxfJitter, i * 12543218) : hgroup("reading %i", info(1, 0, 1)) * (float(SR * lengthSec)) : int;
    record =    cgui(checkbox("[1]Record %i") : int);
    buffer =    rwtable(SRMAX * LengthSecMax + offset, 0.0, recIndex, _, readIndex + offset);
};

//------------------------------------------------------- GRANULAR SAMPLING ---
granular_sampling(k, N, bufSec, x) = triggerArray(N, rate) : 
    par(i, N, grain(bufSec, position, duration, x)) :> _
with {
        grain(L, position, duration, x, trigger) = hann(phase) * 
            buffer(readPtr, x)
        with {
            maxLength = L * 192000;
            length = L * SR;
            hann(ph) = sin(PI * ph) ^ 2.0;
            lineSegment = loop ~ si.bus(2) : _ , ! , _
            with {
                loop(yState, incrementState) = y , increment , ready
                with {
                    ready = ((yState == 0.0) | (yState == 1.0)) & trigger;
                    y = ba.if(ready, increment, min(1.0, yState + increment));
                    increment = ba.if(
                            ready, (1.0/SR) / max((1.0/SR), duration), 
                                incrementState);
                };
            };
            phase = lineSegment : _ , !;
            unlocking = lineSegment : ! , _;
            lock(param) = ba.sAndH(unlocking, param); 
            grainPosition = lock(position);
            grainDuration = lock(duration);
            readPtr = grainPosition * length + phase * grainDuration * SR;
            buffer(readPtr, x) = 
                it.frwtable(3, maxLength, .0, writePtr, x, readPtrWrapped)
            with {
                writePtr = ba.period(length);
                readPtrWrapped = ma.modulo(readPtr, length);
            };
        };

        // works for N >= 2
        triggerArray(N, rate) = loop ~ si.bus(3) : (! , ! , _) <: 
            par(i, N, == (i)) : par(i, N, \(x).(x > x'))
        with {
            loop(incrState, phState, counterState) = incr , ph , counter
            with {
                init = 1 - 1';
                trigger = (phState < phState') + init;
                incr = ba.if(trigger, rate * (1.0/SR), incrState);
                ph = ma.frac(incr + phState);
                counter = (trigger + counterState) % N;
            };
        };

        // pseudo-random noise with linear congruential generator (LCG)
        noise(initSeed) = LCG ~ _ : (_ / m)
        with {
            // initSeed = an initial seed value
            a = 18446744073709551557; // a large prime number, 
                // such as 18446744073709551557
            c = 12345; // a small prime number, such as 12345
            m = 2 ^ 31; // 2.1 billion
            // linear_congruential_generator
            LCG(seed) = ((a * seed + c) + (initSeed - initSeed') % m);
        };
        rnd(i) = abs(noise(12345 + i * 12345));

        position = 
            hslider("v: Granular Sampling %k/Buffer Position", 0, 0, 1, .001) * 
            (1 - (rnd(1) * 
            hslider("v: Granular Sampling %k/Jitter Position", 0, 0, 1, .001)));
        rate = 
            hslider("v: Granular Sampling %k/Density Hz", 20, 1, 100, .001) * 
            (1 - (rnd(2) * 
            hslider("v: Granular Sampling %k/Jitter Density", 0, 0, 1, .001)));
        duration = 
            hslider("v: Granular Sampling %k/Duration Sec.", .1, .001, 1, .001) * 
            (1 - (rnd(3) * 
            hslider("v: Granular Sampling %k/Jitter Dur.", 0, 0, 1, .001))); 
    };
//process = hgroup("granulators", (granular_sampling(1, 10, 10), granular_sampling(2, 10, 10)));

//--------------------------------------------- TIMESTRETCHING (OLA 2 HEADS) ---
// Timestretcher - sum of the 2 Head Reads
// Bufpos = 0 to 1 signals for the reads
timeStretcher(bufferMax, bufferSec, record, readSection, readOffset, readStretch, readJitter, grainDimMs, i, x) = x <: head1 + head2 
with{
    offset = 2;
    // tableMax = table Max Dimension - 10 Seconds
    tableMax = 192000 * bufferMax + offset;

    // Phasor Function
        LetrecPhasor(f) = Xn
            letrec{
                'Xn = (Xn+(f/SR)) : frac;
            };

    frac(x) = x-floor(x);
    // read section
    // stretchFactor - 0 Normal / 1 Extreme stretch (Freeze)
        stretch = LetrecPhasor( (1/bufferSec) - readStretch)
            * readSection;
    // Jitter Amount in the position for the reads
    rnd = abs(noise(10667 * (i + 1)));
    jitter = rnd * readJitter;
    // position in the Buffer for the Reads
    cntrlRead = (readOffset+stretch)-jitter : frac;
    // L = buffer dimension in seconds
    L = SR * bufferSec;
    // Write index - ramp 0 to L
    wIdx = offset + ((+(1) : %(L)) ~ _) * record : int <: 
        attach(_, _/L : hbargraph("[0]Write-Head %i",0,1));
    buffer(p, x) = it.frwtable(3, tableMax, .0, wIdx, x, p);
    // Hanning window Equation
    hann(x) = sin(frac(x) * PI) ^ 2.0;
    // Grain in Milliseconds
    grainms = 1000/grainDimMs : si.smoo;
    // Position of the grain in the Buffer
    bufPos = cntrlRead <: attach(_, _ : hbargraph("[1]Read-Head %i",0,1));
    timePhase = offset + (bufPos * L);
    // two Heads for the read
    // 0°
    ph1 = LetrecPhasor(grainms);
    // 180* 
    ph2 = ma.frac(.5 + ph1);
    // Buffer positions = Position in the Buffer + Grain Read
    pos1 = sah(ph1 : \(x).(x < x'), timePhase) + ph1*(SR/grainms);
    pos2 = sah(ph2 : \(x).(x < x'), timePhase) + ph2*(SR/grainms);
    // Windows + Buffer Reads
    head1 = hann(ph1) * buffer(pos1);
    head2 = hann(ph2) * buffer(pos2);
};
// process = timeStretcher(1, 1, 1, .1, .5, .1, .01, 80, 1), 
//     timeStretcher(1, 1, 1, .1, .0, .1, .01, 80, 2);

//----------------------------------------------------------------- SAMPLERS ---
sampler(memSec, readSpeed, x) =
    it.frwtable(
                    3, // interpolation order
                    192000 * (20), // max.SR * Seconds
                    .0, // start Point
                    ba.period(memSec * SR), // writing index
                    x, // input
                    phasor(readSpeed/memSec) *
                      memSec * SR// external Reading index (0-1)
                );

chunkSampler(memSec, readSpeed, jumpFreq, chunkDim, seed, x) =
    sampler * squareOut
        with{
            square = pwsquare(jumpFreq, chunkDim);
            reader =  splicePH(readSpeed/memSec, seed, square);
            readOut = reader : _, !, !;
            squareOut = reader : !, _, !;
            sampler =
                it.frwtable(
                    3, // interpolation order
                    192000 * (20), // max.SR * Seconds
                    .0, // start Point
                    ba.period(memSec * SR), // writing index
                    x, // input
                    readOut * memSec * SR// external Reading index (0-1)
                );
        };
//process = chunkSampler(4, 1, 8, .99, 2), chunkSampler(4, 1, 8, .99, 4);

chunkGrains(voices, memSec, readSpeed, jumpFreq, chunkDim, x)=
    par(i, voices,
            chunkSampler(memSec, readSpeed, jumpFreq, chunkDim, i, x/voices)
        ) :> (+,+);
//process = _ <: chunkGrains(8, 4, 1, 4, .99);
//pwg = hslider("slide",0,0,1,.001); ftg = hslider("freq.",0,0,100,.001);