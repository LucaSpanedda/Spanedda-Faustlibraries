// THIS library
raca = library("raca.lib");

import("stdls.lib");

/*
Realtime Audio Content Analysis Library
*/

//--------------------------------------------------------------- RMS ----------
// RMS with indipendent attack and release time:
// reference:
// Udo ZÃ¶lzer - Digital Audio Signal Processing Second Edition
// https://fmipa.umri.ac.id/wp-content/uploads/2016/03/Udo-Zolzer-digital-audio-signal-processing.9780470997857.40435.pdf
RMS(att,rel,x) = loop ~ _ : sqrt
    with {
        loop(y) = (1.0 - coeff) * x * x + coeff * y
            with {
                attCoeff = exp(-2.0 * ma.PI * ma.T / att);
                relCoeff = exp(-2.0 * ma.PI * ma.T / rel);
                coeff = ba.if(abs(x) > y, attCoeff, relCoeff);
            };
    };

// Moving Average RMS
movingAverage(seconds, x) = x - (x @ N) : fi.pole(1.0) / N
    with {
        N = seconds * ma.SR;
    };

RMSRectangular(seconds, x) = sqrt(max(0, movingAverage(seconds, x * x)));


//--------------------------------------------------------------- INTEGRATOR ---
// returns the average absolute value over a specific time frame
// (one may use RMS measures, instead, or other amplitude-following methods);
// output range is [0, 1]

integrator(seconds, x) = RMSRectangular(seconds, x);


//----------------------------------------------------------------- LOCALMAX ---
// returns the maximum signal amplitude (absolute value) in a given time frame;
// frame duration is dynamically adjusted: the next frame duration is set at the
// end of the previous frame
peakHolder(resetPeriod, x) = y
    letrec {
        'y = ba.if(reset, abs(x), max(y, abs(x)));
    }
        with {
            reset = os.phasor(1, 1.0 / resetPeriod) : \(x).(x < x');
        };

localmax(seconds, x) = peakHolder(seconds, x);

// Peak Max with IIR filter
peakmax = _ : abs <: loop ~_
with{
    loop(x) = ((_ , x) : max);
    };
